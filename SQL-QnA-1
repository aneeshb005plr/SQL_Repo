# create table called city
create table city (
id int,
name varchar(17),
countrycode varchar(3),
district varchar(20),
population int
);

#Insert records in city table

insert into city values(6, 'Rotterdam', 'NLD', 'Zuid-Holland', 593321),
(3878, 'Scottsdale', 'USA', 'Arizona', 202705),
(3965, 'Corona', 'USA', 'California', 124966),
(3973, 'Concord', 'USA', 'California', 121780),
(3977, 'Cedar Rapids', 'USA', 'Iowa', 120758),
(3982, 'Coral Springs', 'USA', 'Florida', 117549),
(4054, 'Fairfield', 'USA', 'California', 92256),
(4058, 'Boulder', 'USA', 'Colorado', 91238),
(4061, 'Fall River', 'USA', 'Massachusetts', 90555);

Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
The CountryCode for America is USA.
Ans: select * from city where countrycode='USA' and population > 100000;

Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
The CountryCode for America is USA.
Ans: select name from city where countrycode='USA' and population > 120000;

Q3. Query all columns (attributes) for every row in the CITY table.
Ans: select * from city;

Q4. Query all columns for a city in CITY with the ID 1661.
Ans: select * from city where id=1661;

Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
JPN.
Ans: select * from city where countrycode='JPN';

Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
JPN.
Ans: select name from city where countrycode='JPN'

# create a table called station
create table station (
id int,
city varchar(21),
state varchar(2),
lat_n int,
long_w int);

alter table station modify column state varchar(21);

# insert records
insert into station values(794,'Kissee Mills','MO',139,73),
(824,'Loma Mar','CA',48,130),
(603,'Sandy Hook','CT',72,148),
(478,'Tipton','IN',33,97),
(619,'Arlington','CO',75,92),
(711,'Turner','AR',50,101),
(839,'Slidell','LA',85,151),
(411,'Negreet','LA',98,105),
(588,'Glencoe','KY',46,136),
(665,'Chelsea','IA',98,59),
(342,'Chignik Lagoon','AK',103,153),
(733,'Pelahatchie','MS',38,28),
(441,'Hanna','City IL',50,136),
(811,'Dorrance','KS',102,121),
(698,'Albany','CA',49,80),
(325,'Monument','KS',70,141),
(414,'Manchester','MD',73,37),
(113,'Prescott','IA',39,65),
(971,'Graettinger','IA',94,150),
(266,'Cahone','CO',116,127);

Q7. Query a list of CITY and STATE from the STATION table.
Ans: select city,state from station;

Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.
Ans: select distinct(city) from station where id % 2 = 0;

Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.
Ans: select count(city) - count(distinct(city)) as "Difference" from station;

Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.

Ans: (select city, length(city) as length from station order by length(city) desc, city asc limit 1)
union
(select city, length(city) as length from station order by length(city) asc, city asc limit 1)

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.

Ans:select distinct(city) from station where substr(city,1,1) in ('A','E','I','O','U','a','e','i','o','u'); 
or
select distinct(city) from station where REGEXP_LIKE(city,'^[aeiou]','i');

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
contain duplicates.
select distinct(city) from station where substr(city,-1,1) in ('A','E','I','O','U','a','e','i','o','u'); 
or
select distinct(city) from station where REGEXP_LIKE(city,'[aeiou]$','i');

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
contain duplicates.
Ans: select distinct(city) from station where substr(city,1,1) not in ('A','E','I','O','U','a','e','i','o','u')

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
contain duplicates.
Ans: select distinct(city) from station where substr(city,-1,1) not in ('A','E','I','O','U','a','e','i','o','u');

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.
Ans: select distinct(city) from station where substr(city,1,1) not in ('A','E','I','O','U','a','e','i','o','u') or substr(city,-1,1)
 not in ('A','E','I','O','U','a','e','i','o','u');
 
Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates
Ans: select distinct(city) from station where substr(city,1,1) not in ('A','E','I','O','U','a','e','i','o','u') and substr(city,-1,1)
 not in ('A','E','I','O','U','a','e','i','o','u');

# create product table and insert records
create table product (
product_id int,
product_name varchar(20),
unit_price int,
constraint pk primary key(product_id)
);

insert into product values(1,'S8',1000),
(2,'G4',800),
(3,'iPhone',1400);

# create sales table and insert records
create table sales(
seller_id int,
product_id int,
buyer_id int,
sale_date date,
quantity int,
price int,
constraint fk foreign key(product_id) references product(product_id)
);

 insert into sales values(1,1,1,'2019-01-21',2,2000),
 (1,2,2,'2019-02-17',1,800),
 (2,2,3,'2019-06-02',1,800),
 (3,3,4,'2019-05-13',2,2800);

Q17. Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.
Return the result table in any order.

Ans:  select s.product_id, p.product_name from product p inner join sales s on p.product_id = s.product_id where s.sale_date between '2019-01-01' and '2019-03-31' and s.product_id not in
 (select product_id from  sales where sale_date not between '2019-01-01' and '2019-03-31')
 
# create table called views and insert records
 create table views (
article_id int,
author_id int,
viewer_id int,
view_date date
);
insert into views values(1,3,5,'2019-08-01'),
(1,3,6,'2019-08-02'),
(2,7,7,'2019-08-01'),
(2,7,6,'2019-08-02'),
(4,7,1,'2019-07-22'),
(3,4,4,'2019-07-21'),
(3,4,4,'2019-07-21');

Q18 : Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
Ans: select distinct(t1.author_id) from views t1 inner join views t2 on t1.author_id = t2.viewer_id order by t1.author_id; 
or 
select distinct(t1.author_id) from views t1 where t1.author_id = t1.viewer_id order by t1.author_id; 

# create table called delivery and insert records

create table delivery (
delivery_id int,
customer_id int,
order_date date,
customer_pref_delivery_date date,
constraint pk primary key(delivery_id)
);

insert into delivery values
(1,1,'2019-08-01','2019-08-02'),
(2,5,'2019-08-02','2019-08-02'),
(3,1,'2019-08-11','2019-08-11'),
(4,3,'2019-08-24','2019-08-26'),
(5,4,'2019-08-21','2019-08-22'),
(6,2,'2019-08-11','2019-08-13');

Q19. Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal
places.
Ans: select round(sum(case when order_date= customer_pref_delivery_date then 1 else 0 end)/count(delivery_id) * 100,2) as "immediate_order_%" from delivery;


# create table called ads and insert records

create table ads
    (
    ad_id int,
    user_id int,
    action enum('clicked','viewed','ignored'),
    constraint pk primary key (ad_id,user_id)
    );
    insert into ads values
    (1,1,1),
    (2,2,1),
    (3,3,2),
    (5,5,3),
    (1,7,3),
    (2,7,2),
    (3,5,1),
    (1,4,2),
    (2,11,2),
    (1,2,1);
    
   




